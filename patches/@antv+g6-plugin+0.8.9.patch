diff --git a/node_modules/@antv/g6-plugin/es/timeBar/index.js b/node_modules/@antv/g6-plugin/es/timeBar/index.js
index b07b81f..92b2f9b 100644
--- a/node_modules/@antv/g6-plugin/es/timeBar/index.js
+++ b/node_modules/@antv/g6-plugin/es/timeBar/index.js
@@ -101,7 +101,7 @@ var TimeBar = /** @class */function (_super) {
       },
       textStyle: {},
       filterEdge: false,
-      filterItemTypes: ['node'],
+      filterItemTypes: [/* 'node',  */'edge'], /* remove node,  added 'edge' */
       containerCSS: {}
     };
   };
@@ -321,6 +321,7 @@ var TimeBar = /** @class */function (_super) {
       var getDate_1 = this.get('getDate');
       var shouldIgnore_1 = this.get('shouldIgnore');
       var minDate_1 = trendData[min].date,
+
         maxDate_1 = trendData[max].date;
       if (changeData || changeData === undefined) {
         var originNodes = this.cacheGraphData.nodes;
@@ -342,10 +343,16 @@ var TimeBar = /** @class */function (_super) {
             }));
             var exist = currentNodeExistMap_1[node.id];
             if (exist && !hitRange) {
+              //*** Save the node comboID ***//
+              const comboID = node.comboId; //<=== added
               graph.removeItem(node.id);
+              //***Append back the comboID back to node***//
+              console.log('node removed!:', node); //<=== added
+              node.comboId = comboID; //<=== added
               currentNodeExistMap_1[node.id] = false;
             } else if (!exist && hitRange) {
               graph.addItem('node', node);
+              console.log('node added back:', node); //<=== added
               currentNodeExistMap_1[node.id] = true;
             }
           });
@@ -377,16 +384,25 @@ var TimeBar = /** @class */function (_super) {
             var endsExist = currentNodeExistMap_1[edge.source] && currentNodeExistMap_1[edge.target];
             var shouldShow = hitRange && endsExist;
             var exist = currentEdgeExistMap_1[edge.id];
+
+            if(edge.id==="edge6"){
+              console.warn('exist =', exist);
+              console.warn('currentEdgeExistMap_1 =', currentEdgeExistMap_1);
+              console.warn('currentEdgeExistMap_1[edge.id]', currentEdgeExistMap_1[edge.id]);
+              console.warn('shouldShow =',shouldShow)
+            }
             if (exist && !shouldShow) {
               currentEdgeExistMap_1[edge.id] = false;
-              graph.removeItem(edge.id);
+              //graph.removeItem(edge.id);
+              graph.hideItem(graph.findById(edge.id));
             } else if (!exist && shouldShow) {
               currentEdgeExistMap_1[edge.id] = true;
-              graph.addItem('edge', edge);
+              //graph.addItem('edge', edge);
+              graph.showItem(graph.findById(edge.id));
             }
           });
         }
-      } else {
+       } else {
         if (filterItemTypes.includes('node')) {
           graph.getNodes().forEach(function (node) {
             var model = node.getModel();
