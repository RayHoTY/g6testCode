diff --git a/node_modules/@antv/g6-core/es/graph/controller/item.js b/node_modules/@antv/g6-core/es/graph/controller/item.js
index 7d7c659..ae79cc6 100644
--- a/node_modules/@antv/g6-core/es/graph/controller/item.js
+++ b/node_modules/@antv/g6-core/es/graph/controller/item.js
@@ -384,10 +384,14 @@ var ItemController = /** @class */function () {
     }
     var children = combo.getChildren();
     children.nodes.forEach(function (node) {
-      graph.hideItem(node, stack);
+      graph.hideItem(node, stack, 'c'); // <-------MODIFIED
+      const nEdges = node.getEdges();     // <------ ADDED
+      nEdges.forEach((edge) => {      // <------ ADDED
+        graph.hideItem(edge, stack, 'c'); // <------ ADDED & MODIFIED
+      }); // <------ ADDED
     });
     children.combos.forEach(function (c) {
-      graph.hideItem(c, stack);
+      graph.hideItem(c, stack, 'c'); // <-------MODIFIED
     });
   };
   /**
@@ -439,8 +443,9 @@ var ItemController = /** @class */function () {
     var children = combo.getChildren();
     var edgeSet = new Set();
     children.nodes.forEach(function (node) {
-      graph.showItem(node, stack);
+      graph.showItem(node, stack, 'c');
       node.getEdges().forEach(function (edge) {
+        graph.showItem(edge, stack, 'c');       // <------ ADDED
         return edgeSet.add(edge);
       });
     });
@@ -686,7 +691,7 @@ var ItemController = /** @class */function () {
    * @param {boolean} visible 是否显示
    * @memberof ItemController
    */
-  ItemController.prototype.changeItemVisibility = function (item, visible) {
+  ItemController.prototype.changeItemVisibility = function (item, visible, option = undefined) {
     var _this = this;
     var graph = this.graph;
     if (isString(item)) {
@@ -701,6 +706,9 @@ var ItemController = /** @class */function () {
       visible: visible
     });
     item.changeVisibility(visible);
+    if(option === 'c') {  // <------ ADDED
+      item.getModel().collapsedByCombo = !visible; // <------ ADDED
+    } // <------ ADDED
     if (item.getType && item.getType() === NODE) {
       var edges = item.getEdges();
       each(edges, function (edge) {
@@ -709,7 +717,7 @@ var ItemController = /** @class */function () {
         if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {
           return;
         }
-        _this.changeItemVisibility(edge, visible);
+        _this.changeItemVisibility(edge, visible, option); // <------ MODIFIED
       });
     } else if (item.getType && item.getType() === COMBO) {
       var comboTrees = graph.get('comboTrees');
@@ -725,14 +733,13 @@ var ItemController = /** @class */function () {
             found_3 = true;
             return false; // terminate the traverse
           }
-
           return true;
         });
       });
       if (children_1 && (!visible || visible && !item.getModel().collapsed)) {
         children_1.forEach(function (child) {
           var childItem = graph.findById(child.id);
-          _this.changeItemVisibility(childItem, visible);
+          _this.changeItemVisibility(childItem, visible, option); // <------ MODIFIED
         });
       }
       var edges = item.getEdges();
@@ -742,7 +749,7 @@ var ItemController = /** @class */function () {
         if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {
           return;
         }
-        _this.changeItemVisibility(edge, visible);
+        _this.changeItemVisibility(edge, visible, option); // <------ MODIFIED
       });
     }
     graph.emit('afteritemvisibilitychange', {
diff --git a/node_modules/@antv/g6-core/es/graph/graph.js b/node_modules/@antv/g6-core/es/graph/graph.js
index e46df98..1046384 100644
--- a/node_modules/@antv/g6-core/es/graph/graph.js
+++ b/node_modules/@antv/g6-core/es/graph/graph.js
@@ -790,12 +790,13 @@ var AbstractGraph = /** @class */function (_super) {
    * @param {Item} item 指定元素
    * @param {boolean} stack 本次操作是否入栈，默认为 true
    */
-  AbstractGraph.prototype.showItem = function (item, stack) {
+  AbstractGraph.prototype.showItem = function (item, stack, option = undefined) {
     if (stack === void 0) {
       stack = true;
     }
     var itemController = this.get('itemController');
-    var object = itemController.changeItemVisibility(item, true);
+    var object = itemController.changeItemVisibility(item, true, option);
+
     if (stack && this.get('enabledStack')) {
       var id = object.getID();
       var type = object.getType();
@@ -846,12 +847,15 @@ var AbstractGraph = /** @class */function (_super) {
    * @param {Item} item 指定元素
    * @param {boolean} stack 本次操作是否入栈，默认为 true
    */
-  AbstractGraph.prototype.hideItem = function (item, stack) {
+  AbstractGraph.prototype.hideItem = function (item, stack, option = undefined) {
     if (stack === void 0) {
       stack = true;
     }
     var itemController = this.get('itemController');
-    var object = itemController.changeItemVisibility(item, false);
+
+    var object = itemController.changeItemVisibility(item, false, option);
+
+
     if (stack && this.get('enabledStack')) {
       var id = object.getID();
       var type = object.getType();
@@ -2505,17 +2509,28 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate the forEach
-      traverseTree(ctree, function (subTree) {
+      traverseTree(ctree, function(subTree){
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        // if the combo is found
-        if (comboModel.id === subTree.id) found = true;
+        if (found && ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))) { // <---------- ADDED CHANGES
+          if (subTree.itemType === "combo" 
+          && !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+          )   return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) 
+        { 
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
           // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
@@ -2620,15 +2635,30 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate
       traverseTree(ctree, function (subTree) {
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        if (comboModel.id === subTree.id) found = true;
+        if (found && 
+          ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))
+          ) { // <---------- ADDED CHANGES
+          if (
+            subTree.itemType === "combo" && 
+            !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+            ) return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED 
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) {
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
+          // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
