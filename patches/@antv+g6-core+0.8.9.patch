diff --git a/node_modules/@antv/g6-core/es/graph/controller/item.js b/node_modules/@antv/g6-core/es/graph/controller/item.js
index 7d7c659..1e9ce3a 100644
--- a/node_modules/@antv/g6-core/es/graph/controller/item.js
+++ b/node_modules/@antv/g6-core/es/graph/controller/item.js
@@ -385,6 +385,10 @@ var ItemController = /** @class */function () {
     var children = combo.getChildren();
     children.nodes.forEach(function (node) {
       graph.hideItem(node, stack);
+      const nEdges = node.getEdges();
+      nEdges.forEach((edge) => {
+        edge.getModel().collapsedByCombo = true; 
+      });
     });
     children.combos.forEach(function (c) {
       graph.hideItem(c, stack);
@@ -441,6 +445,7 @@ var ItemController = /** @class */function () {
     children.nodes.forEach(function (node) {
       graph.showItem(node, stack);
       node.getEdges().forEach(function (edge) {
+        edge.getModel().collapsedByCombo = false;
         return edgeSet.add(edge);
       });
     });
@@ -733,6 +738,10 @@ var ItemController = /** @class */function () {
         children_1.forEach(function (child) {
           var childItem = graph.findById(child.id);
           _this.changeItemVisibility(childItem, visible);
+          var childEdges = childItem.getEdges();
+          // childEdges.forEach((cEdge) => {
+          //   cEdge.getModel().collapsedByCombo = visible; 
+          // });
         });
       }
       var edges = item.getEdges();
@@ -743,6 +752,7 @@ var ItemController = /** @class */function () {
           return;
         }
         _this.changeItemVisibility(edge, visible);
+        // edge.getModel().collapsedByCombo = visible;
       });
     }
     graph.emit('afteritemvisibilitychange', {
diff --git a/node_modules/@antv/g6-core/es/graph/graph.js b/node_modules/@antv/g6-core/es/graph/graph.js
index e46df98..cef7ae1 100644
--- a/node_modules/@antv/g6-core/es/graph/graph.js
+++ b/node_modules/@antv/g6-core/es/graph/graph.js
@@ -2505,17 +2505,28 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate the forEach
-      traverseTree(ctree, function (subTree) {
+      traverseTree(ctree, function(subTree){
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        // if the combo is found
-        if (comboModel.id === subTree.id) found = true;
+        if (found && ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))) { // <---------- ADDED CHANGES
+          if (subTree.itemType === "combo" 
+          && !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+          )   return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) 
+        { 
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
           // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
@@ -2620,15 +2631,30 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate
       traverseTree(ctree, function (subTree) {
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        if (comboModel.id === subTree.id) found = true;
+        if (found && 
+          ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))
+          ) { // <---------- ADDED CHANGES
+          if (
+            subTree.itemType === "combo" && 
+            !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+            ) return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED 
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) {
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
+          // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
diff --git a/node_modules/@antv/g6-core/es/item/item.js b/node_modules/@antv/g6-core/es/item/item.js
index 478ae9d..4d63f7e 100644
--- a/node_modules/@antv/g6-core/es/item/item.js
+++ b/node_modules/@antv/g6-core/es/item/item.js
@@ -690,8 +690,24 @@ var ItemBase = /** @class */function () {
     var group = this.get('group');
     if (visible) {
       group.show();
+      // if (this.getType() === 'edge') {    // <---- ADDED
+      //   const source = this.getSource(); // <---- ADDED
+      //   const target = this.getTarget(); // <---- ADDED
+      //   // add collapsedByCombo only if it's node is in a combo // <---- ADDED
+      //   if(source.getModel().comboId !== undefined || target.getModel().comboId !== undefined) { // <---- ADDED
+      //     this.getModel().collapsedByCombo = false;    // <---- ADDED
+      //   } // <---- ADDED
+      // }    // <---- ADDED
     } else {
       group.hide();
+      // if (this.getType() === 'edge') {    // <---- ADDED
+      //   const source = this.getSource(); // <---- ADDED
+      //   const target = this.getTarget(); // <---- ADDED
+      //   // add collapsedByCombo only if it's node is in a combo
+      //   if(source.getModel().comboId !== undefined || target.getModel().comboId !== undefined) { // <---- ADDED
+      //    this.getModel().collapsedByCombo = true;    // <---- ADDED
+      //   }
+      // }    
     }
     this.set('visible', visible);
   };
