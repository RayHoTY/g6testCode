diff --git a/node_modules/@antv/g6-core/es/graph/graph.js b/node_modules/@antv/g6-core/es/graph/graph.js
index e46df98..cef7ae1 100644
--- a/node_modules/@antv/g6-core/es/graph/graph.js
+++ b/node_modules/@antv/g6-core/es/graph/graph.js
@@ -2505,17 +2505,28 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate the forEach
-      traverseTree(ctree, function (subTree) {
+      traverseTree(ctree, function(subTree){
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        // if the combo is found
-        if (comboModel.id === subTree.id) found = true;
+        if (found && ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))) { // <---------- ADDED CHANGES
+          if (subTree.itemType === "combo" 
+          && !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+          )   return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) 
+        { 
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
           // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
@@ -2620,15 +2631,30 @@ var AbstractGraph = /** @class */function (_super) {
     var cNodesCombos = [];
     var comboTrees = this.get('comboTrees');
     var found = false;
+    let foundDepth; // <---------- ADDED CHANGES
+    let cNodesCombosID = []; //<=====UNEW
     (comboTrees || []).forEach(function (ctree) {
       if (found) return; // if the combo is found, terminate
       traverseTree(ctree, function (subTree) {
         // if the combo is found and it is traversing the other branches, terminate
-        if (found && subTree.depth <= comboModel.depth) return false;
-        if (comboModel.id === subTree.id) found = true;
+        if (found && 
+          ((subTree.depth <= foundDepth) || (subTree.parentId !== comboModel.id))
+          ) { // <---------- ADDED CHANGES
+          if (
+            subTree.itemType === "combo" && 
+            !cNodesCombosID.includes(subTree.parentId) //<=====UNEW
+            ) return false;  // <---------- ADDED CHANGES
+        } //<=====UPDATED 
+        // if the combo is found or in the children
+        if (comboModel.id === subTree.id) {
+          found = true;
+          foundDepth = subTree.depth; // <---------- ADDED CHANGES
+        }
         if (found) {
+          // if the combo is found, concat the descendant nodes and combos
           var item = _this.findById(subTree.id);
           if (item && item.getType && item.getType() === 'combo') {
+            cNodesCombosID.push(subTree.id); //<=====UNEW
             cNodesCombos = cNodesCombos.concat(item.getNodes());
             cNodesCombos = cNodesCombos.concat(item.getCombos());
           }
